# Copyright (c) 2019-2021 Griefer@Work
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgement (see the following) in the product
#    documentation is required:
#    Portions Copyright (c) 2019-2021 Griefer@Work
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.
###################################################################################################


###################################################################################################
# After making changes to this file, run:
#  $ deemon -F kos/src/libiconv/codecs.h
#  $ deemon -F kos/src/libiconv/codecs.c
#  $ deemon -F kos/src/libiconv/cp.c
#  $ deemon -F kos/src/libiconv/cp-7l.c
#  $ deemon -F kos/src/libiconv/cp-7h.c
#  $ deemon -F kos/src/libiconv/cp-iso646.c
#  $ deemon -F kos/src/libiconv/stateful/cpdb.c
#  $ deemon -F kos/src/libiconv/mbcs/cpdb.c
# Or the one-liner:
#  $ deemon -F kos/src/libiconv/codecs.h kos/src/libiconv/codecs.c kos/src/libiconv/cp.c kos/src/libiconv/cp-7l.c kos/src/libiconv/cp-7h.c kos/src/libiconv/cp-iso646.c kos/src/libiconv/stateful/cpdb.c kos/src/libiconv/mbcs/cpdb.c
###################################################################################################


###################################################################################################
# Sources:
#  - https://www.rfc-editor.org/rfc/rfc1345.txt
#  - https://en.wikipedia.org/wiki/Category:Character_sets
#  - https://en.wikipedia.org/wiki/Category:ISO/IEC_8859
#  - https://en.wikipedia.org/wiki/Category:DOS_code_pages
#  - https://en.wikipedia.org/wiki/Category:Windows_code_pages
#  - https://en.wikipedia.org/wiki/ISO/IEC_646
#  - https://ftp.unicode.org/Public/MAPPINGS/
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml
#  - https://www.ibm.com/docs/en/ibm-mq/8.0?topic=administering-available-code-pages  (WARNING: Contains errors!)
#  - https://github.com/unicode-org/icu                                               (Really good source!)
#  - GLibc
###################################################################################################


###################################################################################################
# Ideas:
#  - Codec "ansitty-NxN" that uses malloc+libansitty to set-up a small in-memory monochrome terminal
#    which it then feeds all of the input data into. Text written is then output to the in-memory
#    display which behaves like a regular terminal (including scrolling and \r, etc). Decode would
#    not be an allowed operation, and the size of the terminal is given via the codec name, but the
#    screen data can be output by use of `iconv_encode_flush()'
#    Problem is, this would require the addition of `iconv_encode_fini()', which is something that
#    I really don't want to have to do, meaning that this will probably never happen :(
#
###################################################################################################
# TODO:
#  - https://en.wikipedia.org/wiki/UTF-1                              "ISO-10646-UTF-1", "csISO10646UTF1"
#  - https://en.wikipedia.org/wiki/GB_18030
#  - https://en.wikipedia.org/wiki/KOI-7                              "KOI7", "KOI7-switched", "csKOI7switched"
#  - https://en.wikipedia.org/wiki/Code_page_776                      "cp776"
#  - https://en.wikipedia.org/wiki/Code_page_777                      "cp777"
#  - https://en.wikipedia.org/wiki/Code_page_778                      "cp778", "LST-1590-2"
#  - https://en.wikipedia.org/wiki/CSX%2B_Indic_character_set         "CSX+Indic"
#  - https://en.wikipedia.org/wiki/Code_page_907                      "cp907", "IBM907"
#  - glibc-2.32/iconvdata/johab.c                                     "MSCP1361", "cp1361", "johab", "x-johab"
#  - glibc-2.32/iconvdata/euc-jp-ms.c                                 "EUC-JP-MS", "EUCJP-MS", "EUCJP-OPEN", "EUCJP-WIN"
#  - glibc-2.32/iconvdata/iso-2022-jptw.c                             "ISO-2022-JP", "iso2022-jp", "csISO2022JP", "ISO2022JP", "jis", "jis-encoding", "csJisEncoding"  (https://www.rfc-editor.org/rfc/rfc1468.html)
#  - glibc-2.32/iconvdata/iso-2022-jp.c                               "ISO-2022-JP-2", ""iso2022-jp2"", "csISO2022JP2", "ISO2022JP2"  (https://www.rfc-editor.org/rfc/rfc1554.html)
#  - glibc-2.32/iconvdata/iso-2022-jp-3.c                             "ISO-2022-JP-3"
#  - glibc-2.32/iconvdata/iso-2022-kr.c                               "ISO-2022-KR", "csISO2022KR", "ISO2022KR", "iso2022-kr"  (https://www.rfc-editor.org/rfc/rfc1557.html)
#  - glibc-2.32/iconvdata/iso-2022-cn.c                               "ISO-2022-CN", "csISO2022CN", "ISO2022CN", "x-ISO-2022-CN-CNS", "ISO-2022-CN", "iso2022-cn-cns", "iso2022cn-cns", "iso2022-cn"  (https://www.rfc-editor.org/rfc/rfc1922.html)
#  - glibc-2.32/iconvdata/iso-2022-cn-ext.c                           "ISO-2022-CN-EXT", "csISO2022CNEXT", "ISO2022CNEXT"  (https://www.rfc-editor.org/rfc/rfc1922.html)
#  - glibc-2.32/iconvdata/asmo_449.c                                  "ASMO_449", "ISO_9036", "arabic7", "iso-ir-89", "csISO89ASMO449"  (https://www.rfc-editor.org/rfc/rfc1345.html)
#  - glibc-2.32/iconvdata/ansi_x3.110.c                               "ANSI_X3.110-1983", "iso-ir-99", "CSA_T500-1983", "CSA_T500", "NAPLPS", "csISO99NAPLPS", "ANSI_X3.110"  (https://www.rfc-editor.org/rfc/rfc1345.html)
#  - glibc-2.32/iconvdata/utf-7.c                                     "UNICODE-1-1-UTF-7", "csUnicode11UTF7", "UTF-7", "UTF7", "csUTF7", "UTF-7-IMAP", "csUTF7IMAP"  (https://www.rfc-editor.org/rfc/rfc1642.html)
#  - glibc-2.32/iconvdata/viscii.c                                    "VISCII", "csVISCII"  (https://www.rfc-editor.org/rfc/rfc1456.html)
#  - glibc-2.32/iconvdata/armscii-8.c                                 "ARMSCII8", "ARMSCII-8"  (https://en.wikipedia.org/wiki/ArmSCII)
#  - glibc-2.32/iconvdata/tcvn5712-1.c                                "tcvn", "tcvn5712-1", "tcvn-5712", "tcvn5712-1:1993"
#  - glibc-2.32/iconvdata/euc-jisx0213.c                              "euc-jisx0213"
#  - glibc-2.32/iconvdata/shift_jisx0213.c                            "ShiftJISX0213", "Shift_JISX0213"
#  - glibc-2.32/iconvdata/tscii.c                                     "TSCII", "csTSCII"
#  - glibc-2.32/iconvdata/iso_11548-1.c                               "ISO_11548-1", "ISO_TR_11548-1", "ISO/TR_11548-1", "ISO11548-1", "csISO115481" (https://www.iana.org/assignments/charset-reg/ISO-11548-1)
#  - https://www.rfc-editor.org/rfc/rfc1345.html                      "JIS_C6226-1983", "iso-ir-87", "x0208", "JIS_X0208-1983", "csISO87JISX0208", "x-JIS0208", "jis-c6226-1983", "jis-x208-1983", "csISO87jisx208", "x208", "jis208"  (https://en.wikipedia.org/wiki/JIS_X_0208)
#  - https://ftp.unicode.org/Public/MAPPINGS/VENDORS/MISC/KPS9566.TXT "KPS9566", "KPS-9566", "KPS-9566-2003"
#  - https://ftp.unicode.org/Public/MAPPINGS/ETSI/GSM0338.TXT         "GSM0338"
#  - https://en.wikipedia.org/wiki/LST_1564
#  - https://en.wikipedia.org/wiki/LST_1590-4
#  - https://en.wikipedia.org/wiki/Mac_OS_Hebrew                      "x-MacHebrew", "machebrew"
#  - https://en.wikipedia.org/wiki/Mac_OS_Keyboard_encoding
#  - https://en.wikipedia.org/wiki/ISO-IR-165                         "iso-ir-165", "CN-GB-ISOIR165"
#  - https://en.wikipedia.org/wiki/ISO-IR-169
#  - https://www.rfc-editor.org/rfc/rfc1345.html                      "iso-ir-142", "ISO_6937-2-add", "csISOTextComm"
#  - https://www.rfc-editor.org/rfc/rfc1345.html                      "csEUCFixWidJapanese"
#  - https://www.rfc-editor.org/rfc/rfc1345.html                      "JIS_C6226-1978", "iso-ir-42", "csISO42JISC62261978"
#  - https://www.rfc-editor.org/rfc/rfc1345.html                      "videotex-suppl", "iso-ir-70", "csISO70VideotexSupp1"
#  - https://www.rfc-editor.org/rfc/rfc1556.html                      "ISO_8859-6-E", "csISO88596E"
#  - https://www.rfc-editor.org/rfc/rfc1556.html                      "ISO_8859-6-I", "csISO88596I"
#  - https://www.rfc-editor.org/rfc/rfc1556.html                      "ISO_8859-8-E", "csISO88598E"
#  - https://www.rfc-editor.org/rfc/rfc1556.html                      "ISO_8859-8-I", "csISO88598I"
#  - https://www.rfc-editor.org/rfc/rfc1345.html                      "T.101-G2", "iso-ir-128", "csISO128T101G2"
#  - https://www.rfc-editor.org/rfc/rfc1345.html                      "JIS_X0212-1990", "x0212", "iso-ir-159", "csISO159JISX02121990"
#  - http://www.unicode.org/notes/tn6/                                "BOCU-1", "csBOCU1", "csBOCU-1"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "ISO-8859-1-Windows-3.0-Latin-1", "csWindows30Latin1"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "ISO-8859-1-Windows-3.1-Latin-1", "csWindows31Latin1"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "ISO-8859-1-Windows-3.1-Latin-2", "csWindows31Latin2"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "ISO-8859-1-Windows-3.1-Latin-5", "csWindows31Latin5"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "PC8-Danish-Norwegian", "csPC8DanishNorwegian"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "PC8-Turkish", "csPC8Turkish"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "IBMSymbols", "csIBMSymbols"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "IBMThai", "csIBMThai"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "HP-Legal", "csHPLegal"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "HP-Pi-font", "csHPPiFont"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "HP-Math8", "csHPMath8"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "HP-DeskTop", "csHPDesktop"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "Ventura-Math", "csVenturaMath"
#  - https://www.iana.org/assignments/character-sets/character-sets.xhtml   "Microsoft-Publishing", "csMicrosoftPublishing"
#  - https://www.rfc-editor.org/rfc/rfc1456.html                            "VIQR", "csVIQR"
#  - https://www.rfc-editor.org/rfc/rfc1842.html                            "HZ-GB-2312"
#  - https://www.iana.org/assignments/charset-reg/CP50220                   "cp50220", "csCP50220"
########
# Weird stuff from IBM? (doesn't actually seem like these are that official as they're hardly
#                        corroborated and some of this stuff even collides with known-good names.
#                        The colliding stuff I've already removed, though)
# s.a. https://www.ibm.com/docs/en/ibm-mq/8.0?topic=administering-available-code-pages
#  - ???                    "IBM1383", "cp1383"
#  - ???                    "windows-950", "ms950", "x-windows-950"
#  - ???                    "IBM838", "cp838"
#  - ???                    "IBM834", "cp834"
#  - ???                    "IBM1381", "cp1381"
#  - ???                    "IBM942", "cp942"
#  - ???                    "IBM942c", "cp942c"
#  - ???                    "IBM948", "cp948"
#  - ???                    "ISCII91", "iscii"
#  - ???                    "ISO-2022-CN-GB", "iso2022-cn-gb", "iso2022cn-gb"
#  - ???                    "JIS0212"
#  - ???                    "x-MacUkraine", "macukraine"
#  - ???                    "x-MacThai", "macthai"
#  - ???                    "x-MacDingbat", "macdingbat"
#  - ???                    "x-ISO-8859-6S", "ISO-8859-6S", "iso8859-6s", "8859-6s"
#  - ???                    
#  - ???                    "x-IBM954C", "IBM954c", "cp954c", "954c"
#  - ???                    "x-IBM864S", "IBM864s", "cp864s", "864s", "csibm864s"
#  - ???                    "x-IBM420S", "IBM420s", "cp420s", "420s", "csibm420s"
#  - ???                    "x-IBM1363C", "IBM1363c", "cp1363c"
#  - ???                    "x-IBM1046S", "IBM1046s", "cp1046s", "1046s"
#  - ???                    "x-IBM-udcJP", "IBMudcjp"
#  - ???                    "IBM939A", "IBM939a", "cp939a"
#  - ???                    "IBM930A", "IBM930a", "cp930a"
#  - ???                    "IBM924-lf", "cp924-lf"
#  - ???                    "IBM924", "cp924", "IBM924", "CCSID924", "ebcdic-Latin9--euro", "csIBM924"
#  - ???                    "IBM1141_LF", "cp1141-lf", "IBM1141-lf"
#  - ???                    "IBM1047_LF", "cp1047-lf", "IBM1047-lf"
#  - ???                    "x-windows-iso2022jp", "windows-iso2022jp"
#  - ???                    "x-windows-50221", "ms50221", "cp50221"
#  - ???                    "x-windows-50220", "ms50220", "cp50220"
#  - ???                    "x-PCK", "pck"
#  - ???                    "IBM837", "cp837"
#  - ???                    "x-eucJP-Open", "euc-jp-solaris", "eucjp-open"
#  - ???                    "x-Big5-Solaris", "big5-solaris"
#  - ???                    "IBM836", "cp836"
#  - ???                    "IBM835", "cp835"
#  - ???                    "IBM833", "cp833"
#  - ???                    "IBM301", "cp301"
#  - ???                    "IBM300", "cp300"
#  - ???                    "IBM1386", "cp1386"
#  - ???                    "IBM1385", "cp1385"
#  - ???                    "IBM1382", "cp1382"
#  - ???                    "IBM1027", "cp1027"
#  - ???                    "CESU-8", "cesu8"
#  - ???                    "COMPOUND_TEXT", "x-compound-text", "x11-compound-text"
#  - ???                    "IBM1351", "cp1351"
#  - ???                    "IBM1362", "cp1362"
#  - ???                    "IBM1370", "cp1370"
#  - ???                    "IBM1380", "cp1380"
#  - ???                    "IBM927", "cp927"
#  - ???                    "IBM5026", "cp5026", "5026"
#  - ???                    "IBM5035", "cp5035", "5035"
#  - ???                    "IBM947", "cp947"
#  - ???                    "IBM951", "cp951"
#  - ???                    "IBM971", "cp971"
#  - ???                    "UTF-8J", "utf8j"
#  - ???                    "windows-1256S", "cp1256s", "IBM1256s"
###################################################################################################
#  - ???                    "cp51932", "csCP51932"
###################################################################################################


###################################################################################################
# ASCII
@CODEC(CODEC_ASCII:
		"ANSI_X3.4-1968", "iso-ir-6", "ANSI_X3.4-1986",
		"ISO646.irv:1991", "ascii", "ISO646-US",
		"us-ascii", "us", "IBM367", "cp367",
		"ANSI_X3.4", "csASCII", "OSF00010020",
		"cp20127", "Windows-20127",
		"IBM891", "cp891", "csIBM891", "OSF1002037B",
		"IBM903", "cp903", "csIBM903", "OSF10020387",
		"default", "646", "ascii7", "direct")

# UTF-8
@CODEC(CODEC_UTF8:
	"UTF8", "UTF-8", "ISO-10646/UTF8", "ISO-10646/UTF-8",
	"iso-ir-193", "OSF05010001", "cp65001", "Windows-65001",
	"csUTF8")

# UTF-16 (LE)
@CODEC(CODEC_UTF16LE: "UTF16LE", "UTF-16LE", "UCS-2LE", "UNICODELITTLE",
                      "csUTF16LE", "X-UnicodeLittle", "x-utf-16le",
                      "unicodelittleunmarked",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF16",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF-16",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "csUTF16",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "ISO-10646/UCS2",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "ISO-10646-UCS-2",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "Unicode",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "csUnicode",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UCS2",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UCS-2",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "OSF00010100",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "OSF00010101",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "OSF00010102",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "cp13488",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "Windows-13488",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "cp1200",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "cp1201",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ && __SIZEOF_WCHAR_T__ == 2)] "WCHAR_T"
)

# UTF-16 (BE)
@CODEC(CODEC_UTF16BE: "UTF16BE", "UTF-16BE", "UCS-2BE", "UNICODEBIG",
                      "csUTF16BE", "X-UnicodeBig", "unicodebigunmarked",
                      "x-utf-16be",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF16",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF-16",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "csUTF16",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "ISO-10646/UCS2",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "ISO-10646-UCS-2",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "Unicode",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "csUnicode",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UCS2",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UCS-2",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "OSF00010100",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "OSF00010101",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "OSF00010102",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "cp13488",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "Windows-13488",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "cp1200",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "cp1201",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ && __SIZEOF_WCHAR_T__ == 2)] "WCHAR_T"
)

# UTF-32 (LE)
@CODEC(CODEC_UTF32LE: "UTF32LE", "UTF-32LE", "UCS-4LE", "csUTF32LE", "x-utf-32le",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF32",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF-32",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "csUTF32",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "ISO-10646/UCS4",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "ISO-10646-UCS-4",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "csUCS4",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UCS4",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UCS-4",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "ISO-10646",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "10646-1:1993",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "10646-1:1993/UCS4",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "OSF00010104",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "OSF00010105",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "OSF00010106",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "cp12000",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ && __SIZEOF_WCHAR_T__ == 4)] "WCHAR_T"
)

# UTF-32 (BE)
@CODEC(CODEC_UTF32BE: "UTF32BE", "UTF-32BE", "UCS-4BE", "cp12001",
                      "Windows-12001", "csUTF32BE", "x-utf-32be",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF32",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF-32",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "csUTF32",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "ISO-10646/UCS4",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "ISO-10646-UCS-4",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "csUCS4",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UCS4",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UCS-4",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "ISO-10646",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "10646-1:1993",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "10646-1:1993/UCS4",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "OSF00010104",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "OSF00010105",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "OSF00010106",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "cp12000",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ && __SIZEOF_WCHAR_T__ == 4)] "WCHAR_T"
)

# UTF-8 (with BOM)
@CODEC(CODEC_UTF8_BOM: "UTF8-BOM", "UTF-8-BOM", "UTF8BOM", "UTF-8BOM")

# UTF-16 (LE, with BOM)
@CODEC(CODEC_UTF16LE_BOM: "UTF16LE-BOM", "UTF-16LE-BOM", "UTF16LEBOM", "UTF-16LEBOM", "X-UTF-16LE-BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF16-BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF-16-BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF16BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF-16BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "X-UTF-16-BOM")

# UTF-16 (BE, with BOM)
@CODEC(CODEC_UTF16BE_BOM: "UTF16BE-BOM", "UTF-16BE-BOM", "UTF16BEBOM", "UTF-16BEBOM", "X-UTF-16BE-BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF16-BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF-16-BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF16BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF-16BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "X-UTF-16-BOM")

# UTF-32 (LE, with BOM)
@CODEC(CODEC_UTF32LE_BOM: "UTF32LE-BOM", "UTF-32LE-BOM", "UTF32LEBOM", "UTF-32LEBOM", "X-UTF-32LE-BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF32-BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF-32-BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF32BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "UTF-32BOM",
	[if(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)] "X-UTF-32-BOM")

# UTF-32 (BE, with BOM)
@CODEC(CODEC_UTF32BE_BOM: "UTF32BE-BOM", "UTF-32BE-BOM", "UTF32BEBOM", "UTF-32BEBOM", "X-UTF-32BE-BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF32-BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF-32-BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF32BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "UTF-32BOM",
	[if(__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)] "X-UTF-32-BOM")



# LATIN-1
@CODEC(CODEC_ISO_8859_1:
		"ISO_8859-1:1987", "iso-ir-100", "ISO_8859-1", "latin1",
		"l1", "IBM819", "cp819", "ISO_88591", "csISOLatin1",
		"cp28591", "Windows-28591", "WE8ISO8859P1", "cp38591",
		"Windows-38591", "ISO_8859-1-I", "8859_1", "OSF00010001")



#
# c-escape
#
# NOTE: This codec is special in that it is built on-top of utf-8 input/output,
#       meaning that the decoder expects its input to be formatted as utf-8,
#       while also producing utf-8 output itself.
#       An exception to this are the c-escape*-bytes codecs which when used as
#       decoders don't impose any requirements on input encoding, but will simply
#       escape incoming data as would be required for that data to be written to
#       a C string.
#
# NOTE: When decoding via "c-escape", there are actually 3 different modes which
#       it will detect based on the first character fed to as input. When that
#       character is ' or ", parse everything the same as when c-escape-chr or
#       c-escape-str were being used. Otherwise, enter a raw c-escape mode which
#       is also known as c-escape-raw, where the first character is already apart
#       of the string being escaped. In this mode, both an unescaped " or ' cause
#       decode errors. During encoding, c-escape-raw is the same as c-escape
@CODEC(CODEC_C_ESCAPE: "c-escape")                                            # Hello\uFFFF\nWorld
@CODEC(CODEC_C_ESCAPE_STR: "c-escape-str")                                    # "Hello\uFFFF\nWorld"
@CODEC(CODEC_C_ESCAPE_CHR: "c-escape-chr")                                    # 'Hello\uFFFF\nWorld'
@CODEC(CODEC_C_ESCAPE_RAW: "c-escape-raw")                                    # Hello\uFFFF\nWorld
@CODEC(CODEC_C_ESCAPE_BYTES: "c-escape-bytes")                                # Hello\xEF\xBF\xBF\nWorld
@CODEC(CODEC_C_ESCAPE_BYTES_STR: "c-escape-bytes-str", "c-escape-str-bytes")  # "Hello\xEF\xBF\xBF\nWorld"
@CODEC(CODEC_C_ESCAPE_BYTES_CHR: "c-escape-bytes-chr", "c-escape-chr-bytes")  # 'Hello\xEF\xBF\xBF\nWorld'
@CODEC(CODEC_C_ESCAPE_BYTES_RAW: "c-escape-bytes-raw", "c-escape-raw-bytes")  # Hello\xEF\xBF\xBF\nWorld

#
# -inchr or -instr variants of c-escape codec. These behave the same during encoding,
# but when decoding will set-up the internal state machine such that parsing operates
# as though "c-escape" was used, but the first character parsed had been a " or ', as
# well as stop decoding data on-top of the next unescaped " or '.
#
# As such, these codecs may be used by C-like compilers to parse the _contents_ of a
# C-string or character (such that input data starts _after_ the leading " or ', and
# the decoder will refuse to continue parsing once the next unescaped " or ' is found).
#
# The alternative is to use "c-escape", "c-escape-str" or "c-escape-ch" and have input
# data start at the leading " or ', in which case parsing will continue until the first
# non-whitespace character is encountered outside of the string/character literal.
#
# Another alternative is to use "c-escape-raw" during decoding, but unlike -in(str|chr),
# that codec will stop parsing when " or ' is encountered, whereas "c-escape-instr"
# allows unescaped ', and "c-escape-inchr" likewise allows unescaped ".
@CODEC(CODEC_C_ESCAPE_INSTR: "c-escape-instr")
@CODEC(CODEC_C_ESCAPE_INCHR: "c-escape-inchr")
@CODEC(CODEC_C_ESCAPE_BYTES_INSTR: "c-escape-instr-bytes", "c-escape-bytes-instr")
@CODEC(CODEC_C_ESCAPE_BYTES_INCHR: "c-escape-inchr-bytes", "c-escape-bytes-inchr")

#
# Finally, there's "c-escape-all" which behaves like "c-escape-raw", but allows both "
# and ' to be used without needing them to be escaped. Note however that when this codec
# will obviously not stop parsing data when something conventionally thought of as a string
# end marker is encountered.
@CODEC(CODEC_C_ESCAPE_ALL: "c-escape-all")
@CODEC(CODEC_C_ESCAPE_BYTES_ALL: "c-escape-all-bytes", "c-escape-bytes-all")



# Codec "xml-escape" for &lt;xml-style&gt; escaping (https://en.wikipedia.org/wiki/XML)
@CODEC(CODEC_XML_ESCAPE: "xml-escape", "html-escape")

# Codec "uri-escape" for %3Curi-style%3E escaping (https://en.wikipedia.org/wiki/Percent-encoding)
@CODEC(CODEC_URI_ESCAPE: "uri-escape", "url-escape", "Percent-encoding", "URL-encoding")

# The "hex" family of codecs simply decodes input in pairs of hex nibbles,
# where every first is the upper nibble and every second the lower one. For
# this purpose, both codecs support both casings during decode, but during
# encode they produce different casings for A-F (aka. a-f)
@CODEC(CODEC_HEX_LOWER: "hex-lower")
@CODEC(CODEC_HEX_UPPER: "hex-upper", "hex")
###################################################################################################




###################################################################################################
# Generic code 1-byte code pages
@INCLUDE("./pages")



###################################################################################################
# Codecs declared as CODEC_STATEFUL work like this:
# NOTE: Each codec has a different <SINGLE_BYTE_LOOKUP_TABLE> / <DOUBLE_BYTE_LOOKUP_TABLE>
#
# VAR STATE: enum { SINGLE_BYTE, DOUBLE_BYTE_1, DOUBLE_BYTE_2 } = SINGLE_BYTE
# VAR SAVED_BYTE: unsigned char                                 = <undefined>
#
# decode(unsigned char ch) {
#    if (ch == 0x0E)             // 0x0E = ascii.SO
#        STATE = DOUBLE_BYTE_1;
#    else if (ch == 0x0F)        // 0x0F = ascii.SI
#        STATE = SINGLE_BYTE;
#    else {
#        if (STATE == SINGLE_BYTE) {
#            return <SINGLE_BYTE_LOOKUP_TABLE>[ch];
#        }
#        if (STATE == DOUBLE_BYTE_1) {
#            STATE = DOUBLE_BYTE_2;
#            SAVED_BYTE = ch;
#            return;
#        }
#        assert(STATE == DOUBLE_BYTE_2);
#        uint16_t ch16 = (SAVED_BYTE << 8) | ch;
#        return <DOUBLE_BYTE_LOOKUP_TABLE>[ch];
#    }
# }
@INCLUDE("./stateful-ibm930")
@INCLUDE("./stateful-ibm930")
@INCLUDE("./stateful-ibm933")
@INCLUDE("./stateful-ibm935")
@INCLUDE("./stateful-ibm937")
@INCLUDE("./stateful-ibm939")
@INCLUDE("./stateful-ibm1364")
@INCLUDE("./stateful-ibm1371")
@INCLUDE("./stateful-ibm1388")
@INCLUDE("./stateful-ibm1390")
@INCLUDE("./stateful-ibm1399")



###################################################################################################
# Codecs declared as CODEC_MBCS work like this:
# NOTE: Each codec has a different <SINGLE_BYTE_LOOKUP_TABLE> / <DOUBLE_BYTE_LOOKUP_TABLE>
#
# VAR SAVED_BYTE: unsigned char = 0
#
# decode(unsigned char ch) {
#    if (SAVED_BYTE != 0) {
#        uint16_t ch16 = (SAVED_BYTE << 8) | ch;
#        SAVED_BYTE = 0;
#        return <DOUBLE_BYTE_LOOKUP_TABLE>[ch16];
#    }
#    result = <SINGLE_BYTE_LOOKUP_TABLE>[ch];
#    if (result == 0) {
#        if (!DOES_DOUBLE_WIDE_EXIST_FOR(ch << 8 | 0x??))
#            return ERROR; // Illegal bytes
#        SAVED_BYTE = ch;
#        return;
#    }
#    return result;
# }
#
@INCLUDE("./mbcs-big5")
@INCLUDE("./mbcs-big5hkscs")
@INCLUDE("./mbcs-cp949c")
@INCLUDE("./mbcs-euc-cn")
@INCLUDE("./mbcs-euc-kr")
@INCLUDE("./mbcs-gbk")
@INCLUDE("./mbcs-ibm1363")
@INCLUDE("./mbcs-ibm1373")
@INCLUDE("./mbcs-ibm1386")
@INCLUDE("./mbcs-ibm5471")
@INCLUDE("./mbcs-ibm932")
@INCLUDE("./mbcs-ibm943")
@INCLUDE("./mbcs-ibm949")
@INCLUDE("./mbcs-ibm950")
@INCLUDE("./mbcs-korean")
@INCLUDE("./mbcs-ms949")
@INCLUDE("./mbcs-shift-jis")
# MBCS codecs with overly long byte sequences:
#   3 or more bytes may decode to a character
@INCLUDE("./mbcs-euc-jp")
@INCLUDE("./mbcs-euc-tw")
@INCLUDE("./mbcs-gb18030")
@INCLUDE("./mbcs-ibm33722")
@INCLUDE("./mbcs-ibm954")


